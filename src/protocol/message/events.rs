//! X11 Protocol Events
//!
//! This module contains all X11 event definitions that are sent from server to clients.
//! Events are notifications about changes in the X server state.

use crate::protocol::types::*;

/// X11 event types sent from server to clients
#[derive(Debug, Clone)]
pub enum Event {
    KeyPress {
        detail: KeyCode,
        time: Timestamp,
        root: Window,
        event: Window,
        child: Window,
        root_x: i16,
        root_y: i16,
        event_x: i16,
        event_y: i16,
        state: u16,
        same_screen: bool,
    },
    KeyRelease {
        detail: KeyCode,
        time: Timestamp,
        root: Window,
        event: Window,
        child: Window,
        root_x: i16,
        root_y: i16,
        event_x: i16,
        event_y: i16,
        state: u16,
        same_screen: bool,
    },
    ButtonPress {
        detail: u8,
        time: Timestamp,
        root: Window,
        event: Window,
        child: Window,
        root_x: i16,
        root_y: i16,
        event_x: i16,
        event_y: i16,
        state: u16,
        same_screen: bool,
    },
    ButtonRelease {
        detail: u8,
        time: Timestamp,
        root: Window,
        event: Window,
        child: Window,
        root_x: i16,
        root_y: i16,
        event_x: i16,
        event_y: i16,
        state: u16,
        same_screen: bool,
    },
    MotionNotify {
        detail: u8,
        time: Timestamp,
        root: Window,
        event: Window,
        child: Window,
        root_x: i16,
        root_y: i16,
        event_x: i16,
        event_y: i16,
        state: u16,
        same_screen: bool,
    },
    EnterNotify {
        detail: u8,
        time: Timestamp,
        root: Window,
        event: Window,
        child: Window,
        root_x: i16,
        root_y: i16,
        event_x: i16,
        event_y: i16,
        state: u16,
        mode: u8,
        same_screen_focus: u8,
    },
    LeaveNotify {
        detail: u8,
        time: Timestamp,
        root: Window,
        event: Window,
        child: Window,
        root_x: i16,
        root_y: i16,
        event_x: i16,
        event_y: i16,
        state: u16,
        mode: u8,
        same_screen_focus: u8,
    },
    FocusIn {
        event: Window,
        mode: u8,
        detail: u8,
    },
    FocusOut {
        event: Window,
        mode: u8,
        detail: u8,
    },
    KeymapNotify {
        keys: [u8; 31],
    },
    Expose {
        window: Window,
        x: u16,
        y: u16,
        width: u16,
        height: u16,
        count: u16,
    },
    GraphicsExposure {
        drawable: Drawable,
        x: u16,
        y: u16,
        width: u16,
        height: u16,
        minor_opcode: u16,
        count: u16,
        major_opcode: u8,
    },
    NoExposure {
        drawable: Drawable,
        minor_opcode: u16,
        major_opcode: u8,
    },
    VisibilityNotify {
        window: Window,
        state: u8,
    },
    CreateNotify {
        parent: Window,
        window: Window,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        border_width: u16,
        override_redirect: bool,
    },
    DestroyNotify {
        event: Window,
        window: Window,
    },
    UnmapNotify {
        event: Window,
        window: Window,
        from_configure: bool,
    },
    MapNotify {
        event: Window,
        window: Window,
        override_redirect: bool,
    },
    MapRequest {
        parent: Window,
        window: Window,
    },
    ReparentNotify {
        event: Window,
        window: Window,
        parent: Window,
        x: i16,
        y: i16,
        override_redirect: bool,
    },
    ConfigureNotify {
        event: Window,
        window: Window,
        above_sibling: Window,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        border_width: u16,
        override_redirect: bool,
    },
    ConfigureRequest {
        stack_mode: u8,
        parent: Window,
        window: Window,
        sibling: Window,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        border_width: u16,
        value_mask: u16,
    },
    GravityNotify {
        event: Window,
        window: Window,
        x: i16,
        y: i16,
    },
    ResizeRequest {
        window: Window,
        width: u16,
        height: u16,
    },
    CirculateNotify {
        event: Window,
        window: Window,
        place: u8,
    },
    CirculateRequest {
        parent: Window,
        window: Window,
        place: u8,
    },
    PropertyNotify {
        window: Window,
        atom: Atom,
        time: Timestamp,
        state: u8,
    },
    SelectionClear {
        time: Timestamp,
        owner: Window,
        selection: Atom,
    },
    SelectionRequest {
        time: Timestamp,
        owner: Window,
        requestor: Window,
        selection: Atom,
        target: Atom,
        property: Atom,
    },
    SelectionNotify {
        time: Timestamp,
        requestor: Window,
        selection: Atom,
        target: Atom,
        property: Atom,
    },
    ColormapNotify {
        window: Window,
        colormap: Colormap,
        new: bool,
        state: u8,
    },
    ClientMessage {
        format: u8,
        window: Window,
        message_type: Atom,
        data: ClientMessageData,
    },
    MappingNotify {
        request: u8,
        first_keycode: KeyCode,
        count: u8,
    },
}

/// Client message data union
#[derive(Debug, Clone)]
pub enum ClientMessageData {
    Data8([u8; 20]),
    Data16([u16; 10]),
    Data32([u32; 5]),
}

impl Event {
    /// Get the event code for this event type
    pub fn event_code(&self) -> u8 {
        match self {
            Event::KeyPress { .. } => EventType::KeyPress as u8,
            Event::KeyRelease { .. } => EventType::KeyRelease as u8,
            Event::ButtonPress { .. } => EventType::ButtonPress as u8,
            Event::ButtonRelease { .. } => EventType::ButtonRelease as u8,
            Event::MotionNotify { .. } => EventType::MotionNotify as u8,
            Event::EnterNotify { .. } => EventType::EnterNotify as u8,
            Event::LeaveNotify { .. } => EventType::LeaveNotify as u8,
            Event::FocusIn { .. } => EventType::FocusIn as u8,
            Event::FocusOut { .. } => EventType::FocusOut as u8,
            Event::KeymapNotify { .. } => EventType::KeymapNotify as u8,
            Event::Expose { .. } => EventType::Expose as u8,
            Event::GraphicsExposure { .. } => EventType::GraphicsExpose as u8,
            Event::NoExposure { .. } => EventType::NoExpose as u8,
            Event::VisibilityNotify { .. } => EventType::VisibilityNotify as u8,
            Event::CreateNotify { .. } => EventType::CreateNotify as u8,
            Event::DestroyNotify { .. } => EventType::DestroyNotify as u8,
            Event::UnmapNotify { .. } => EventType::UnmapNotify as u8,
            Event::MapNotify { .. } => EventType::MapNotify as u8,
            Event::MapRequest { .. } => EventType::MapRequest as u8,
            Event::ReparentNotify { .. } => EventType::ReparentNotify as u8,
            Event::ConfigureNotify { .. } => EventType::ConfigureNotify as u8,
            Event::ConfigureRequest { .. } => EventType::ConfigureRequest as u8,
            Event::GravityNotify { .. } => EventType::GravityNotify as u8,
            Event::ResizeRequest { .. } => EventType::ResizeRequest as u8,
            Event::CirculateNotify { .. } => EventType::CirculateNotify as u8,
            Event::CirculateRequest { .. } => EventType::CirculateRequest as u8,
            Event::PropertyNotify { .. } => EventType::PropertyNotify as u8,
            Event::SelectionClear { .. } => EventType::SelectionClear as u8,
            Event::SelectionRequest { .. } => EventType::SelectionRequest as u8,
            Event::SelectionNotify { .. } => EventType::SelectionNotify as u8,
            Event::ColormapNotify { .. } => EventType::ColormapNotify as u8,            Event::ClientMessage { .. } => EventType::ClientMessage as u8,
            Event::MappingNotify { .. } => EventType::MappingNotify as u8,
        }
    }
}
